<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shop.mapper.UserMapper">
	
	<select id="getLogin" parameterType="user" resultType="user">
		SELECT
			  `uid`,
			  `username`,
			  `password`,
			  `iphone`,
			  `email`,
			  `code`,
			  `state`,
			  `type`
			FROM `user`
		where username = "${username}" and password = "${password}"
	</select>
	
	<insert id="saveUser" parameterType="user">
		<selectKey keyProperty="uid" resultType="string" order="BEFORE">
			SELECT UUID()
		</selectKey>
		INSERT INTO `user` 
			(`uid`, 
			`username`, 
			`password`, 
			`age`, 
			`sex`, 
			`iphone`, 
			`email`, 
			`code`, 
			`state`, 
			`type`
			)
			VALUES
			(#{uid}, 
			#{username}, 
			#{password}, 
			#{age}, 
			#{sex}, 
			#{iphone}, 
			#{email}, 
			#{code}, 
			#{state}, 
			#{type}
			);
				
	</insert>
	
	<update id="saveActive" parameterType="string">
		UPDATE `user` 
			SET
			`state` = "1",
			`code` = null
			WHERE
			`code` = #{state};
		
	</update>
	
	<select id="findAllUser" resultType="user">
		SELECT 	`uid`, 
			`username`, 
			`password`, 
			`age`, 
			`sex`, 
			`iphone`, 
			`email`, 
			`code`, 
			`state`, 
			`type`
	 
			FROM 
			`user` 	
	</select>
	
	<select id="findUserByUid" parameterType="user" resultType="user">
		SELECT 	`uid`, 
			`username`, 
			`password`, 
			`age`, 
			`sex`, 
			`iphone`, 
			`email`, 
			`code`, 
			`state`, 
			`type`
	 
			FROM 
			`user` 
			WHERE
			`uid` = #{uid};	
	</select>
	
	<update id="saveUserByUid" parameterType="user">
				UPDATE `user` 
			SET
			`uid` = #{uid} , 
			`username` = #{username} , 
			`age` = #{age}, 
			`sex` = #{sex} , 
			`iphone` = #{iphone} , 
			`email` = #{email} , 
			`code` = #{code} , 
			`state` = #{state} , 
			`type` = #{type}
			
			WHERE
			`uid` = #{uid} ;
		
	</update>
	
	<select id="findAllOrder" resultType="order">
		SELECT
		  `id`,
		  `oid`,
		  `uid`,
		  `create_time` createTime,
		  `count`,
		  `totol`,
		  `state`
		FROM `orders`	
	</select>
	
	<!-- type数据类型 -->
	<resultMap type="order" id="order_user_map">
		<!-- 主键映射 -->
		<id property="id" column="id" />
		<result property="oId" column="oid" />
		<result property="uId" column="uid" />
		<result property="createTime" column="create_time" />
		<result property="count" column="count" />
		<result property="totol" column="totol" />
		<result property="state" column="state" />
		<!-- 用于配置一对一关系 ，property，订单order中的user属性
		javaType可以用别名 user，user数据类型-->
		<association property="user" javaType="user">
			<id property="uid" column="uid" />
			<result property="username" column="username" />
			<result property="password" column="password" />
			<result property="age" column="age" />
			<result property="sex" column="sex" />
			<result property="iphone" column="iphone" />
			<result property="email" column="email" />
			<result property="state" column="state" />
		</association>
	</resultMap>
	
	<select id="findOrderById" parameterType="order" resultMap="order_user_map">
		SELECT
	  o.`id`,
	  o.`oid`            oId,
	  o.`uid`            uId,
	  o.`create_time`    createTime,
	  o.`count`,
	  o.`totol`,
	  o.`state`,
	  u.`uid`,
	  u.`username`,
	  u.`password`,
	  u.`age`,
	  u.`sex`,
	  u.`iphone`,
	  u.`email`,
	  u.`code`,
	  u.`state`,
	  u.`type`
	FROM `orders` o
	  LEFT JOIN `user` u
	    ON u.uid = o.uid
	    WHERE  o.`id`=#{id}
	</select>
	
	<!-- <select id="findOrderById" parameterType="order" resultType="order">
		SELECT
		  `id`,
		  `oid`,
		  `uid`,
		  `create_time` createTime,
		  `count`,
		  `totol`,
		  `state`
		FROM `orders`
		WHERE
			`id` = #{id} 	
	</select> -->
	
	<select id="findAllGoodType" resultType="goodtype">
		SELECT
		`id` ,
	  `good_id` goodId,
	  `name` goodName
	FROM `good_type`
	</select>
	
	<select id="findGoodTypeById" parameterType="goodtype" resultType="goodtype">
		SELECT
			id ,
		  `good_id` goodId,
		  `name` goodName
		FROM `good_type`
			WHERE
			`id` = #{id};	
	</select>
	
	<update id="saveGoodTypeByUid" parameterType="goodtype">
		UPDATE `good_type`
			SET `good_id` = #{goodId},
			  `name` = #{goodName}
			WHERE `id` = #{id};
	</update>
	
	<select id="findAllGood" resultType="goods">
		SELECT 	`gid` gId, 
			`gname` gName, 
			`price`, 
			`desc`, 
			`photo`, 
			`count`, 
			`good_id` goodId
			 
			FROM 
			`goods` 
	</select>
	
	<select id="findGoodById" parameterType="goods" resultType="goods">
		SELECT 	`gid` gId, 
			`gname` gName, 
			`price`, 
			`desc`, 
			`photo`, 
			`count`, 
			`good_id` goodId
			 
			FROM 
			`goods` 
			WHERE
			`gid` = #{gId};	
	</select>
	<update id="saveGoodByUid" parameterType="goods">
		UPDATE `goods`
			SET `gid` = #{gId},
			  `gname` = #{gName},
			  `price` = #{price},
			  `desc` = #{desc},
			  `photo` = #{photo},
			  `count` = #{count},
			  `good_id` = #{goodId}
			WHERE `gid` = #{gId};
	</update>
	<update id="sendOrderById" parameterType="order">
		UPDATE `orders`
			SET 
			  `state` = #{state}
			WHERE `id` = #{id};
	</update>
	
	<insert id="addGoodTypeNew" parameterType="goodType">
		<selectKey keyProperty="id" resultType="string" order="BEFORE">
			SELECT UUID()
		</selectKey>
			INSERT INTO `good_type`
	            (`id`,
	             `good_id`,
	             `name`)
		VALUES (#{id},
		        #{goodId},
		        #{goodName});
	</insert>
	
	<insert id="addGoodss" parameterType="goods">
		<selectKey keyProperty="gId" resultType="string" order="BEFORE">
			SELECT UUID()
		</selectKey>
			INSERT INTO `goods`
            (`gid`,
             `gname`,
             `price`,
             `desc`,
             `photo`,
             `count`,
             `good_id`)
			VALUES (#{gId},
			        #{gName},
			        #{price},
			        #{desc},
			        #{photo},
			        #{count},
			       #{goodId});
	</insert>
	
	<delete id="delUserByUid"  parameterType="QuervVo">
	DELETE
		FROM `user`
		<where>
			<!-- 遍历集合 item循环变量，separator分隔符 -->
			<foreach collection="ids" open="uid IN(" item="uId" separator="," close=")">
				#{uId}
			</foreach>
		</where>
	</delete>
	
	<delete id="delGoodTypeByUid"  parameterType="QuervVo">
	DELETE
		FROM `good_type`
		<where>
			<!-- 遍历集合 item循环变量，separator分隔符 -->
			<foreach collection="ids" open="good_id IN(" item="uId" separator="," close=")">
				#{uId}
			</foreach>
		</where>
	</delete>
	
	<delete id="delGoodByUid"  parameterType="QuervVo">
			DELETE
		FROM `goods`
		<where>
			<!-- 遍历集合 item循环变量，separator分隔符 -->
			<foreach collection="ids" open="gid IN(" item="uId" separator="," close=")">
				#{uId}
			</foreach>
		</where>
	</delete>
	
	<delete id="delListByUid"  parameterType="QuervVo">
			delete
				from `orders`
		<where>
			<!-- 遍历集合 item循环变量，separator分隔符 -->
			<foreach collection="ids" open="id IN(" item="uId" separator="," close=")">
				#{uId}
			</foreach>
		</where>
	</delete>
	
	<insert id="addGoodNew" parameterType="goods">
		<selectKey keyProperty="gId" resultType="string" order="BEFORE">
			SELECT UUID()
		</selectKey>
		INSERT INTO `goods`
            (`gid`,
             `gname`,
             `price`,
             `desc`,
             `photo`,
             `count`,
             `good_id`)
		VALUES (#{gId},
		        #{gName},
		        #{price},
		        #{desc},
		        #{photo},
		        #{count},
		        #{goodId});
	</insert>
</mapper>
